/*
 * This file is generated by jOOQ.
 */
package eu.dissco.dataexporter.database.jooq.tables;


import eu.dissco.dataexporter.database.jooq.Keys;
import eu.dissco.dataexporter.database.jooq.Public;
import eu.dissco.dataexporter.database.jooq.enums.ExportType;
import eu.dissco.dataexporter.database.jooq.enums.JobState;
import eu.dissco.dataexporter.database.jooq.tables.records.ExportQueueRecord;

import java.time.Instant;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExportQueue extends TableImpl<ExportQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.export_queue</code>
     */
    public static final ExportQueue EXPORT_QUEUE = new ExportQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExportQueueRecord> getRecordType() {
        return ExportQueueRecord.class;
    }

    /**
     * The column <code>public.export_queue.id</code>.
     */
    public final TableField<ExportQueueRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.export_queue.params</code>.
     */
    public final TableField<ExportQueueRecord, JSONB> PARAMS = createField(DSL.name("params"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.export_queue.creator</code>.
     */
    public final TableField<ExportQueueRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.export_queue.job_state</code>.
     */
    public final TableField<ExportQueueRecord, JobState> JOB_STATE = createField(DSL.name("job_state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(JobState.class), this, "");

    /**
     * The column <code>public.export_queue.time_scheduled</code>.
     */
    public final TableField<ExportQueueRecord, Instant> TIME_SCHEDULED = createField(DSL.name("time_scheduled"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.export_queue.time_started</code>.
     */
    public final TableField<ExportQueueRecord, Instant> TIME_STARTED = createField(DSL.name("time_started"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.export_queue.time_completed</code>.
     */
    public final TableField<ExportQueueRecord, Instant> TIME_COMPLETED = createField(DSL.name("time_completed"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.export_queue.export_type</code>.
     */
    public final TableField<ExportQueueRecord, ExportType> EXPORT_TYPE = createField(DSL.name("export_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ExportType.class), this, "");

    /**
     * The column <code>public.export_queue.hashed_params</code>.
     */
    public final TableField<ExportQueueRecord, UUID> HASHED_PARAMS = createField(DSL.name("hashed_params"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.export_queue.destination_email</code>.
     */
    public final TableField<ExportQueueRecord, String> DESTINATION_EMAIL = createField(DSL.name("destination_email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.export_queue.download_link</code>.
     */
    public final TableField<ExportQueueRecord, String> DOWNLOAD_LINK = createField(DSL.name("download_link"), SQLDataType.CLOB, this, "");

    private ExportQueue(Name alias, Table<ExportQueueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ExportQueue(Name alias, Table<ExportQueueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.export_queue</code> table reference
     */
    public ExportQueue(String alias) {
        this(DSL.name(alias), EXPORT_QUEUE);
    }

    /**
     * Create an aliased <code>public.export_queue</code> table reference
     */
    public ExportQueue(Name alias) {
        this(alias, EXPORT_QUEUE);
    }

    /**
     * Create a <code>public.export_queue</code> table reference
     */
    public ExportQueue() {
        this(DSL.name("export_queue"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExportQueueRecord> getPrimaryKey() {
        return Keys.EXPORT_QUEUE_PK;
    }

    @Override
    public ExportQueue as(String alias) {
        return new ExportQueue(DSL.name(alias), this);
    }

    @Override
    public ExportQueue as(Name alias) {
        return new ExportQueue(alias, this);
    }

    @Override
    public ExportQueue as(Table<?> alias) {
        return new ExportQueue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExportQueue rename(String name) {
        return new ExportQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExportQueue rename(Name name) {
        return new ExportQueue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExportQueue rename(Table<?> name) {
        return new ExportQueue(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExportQueue where(Condition condition) {
        return new ExportQueue(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExportQueue where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExportQueue where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExportQueue where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExportQueue where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExportQueue where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExportQueue where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ExportQueue where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExportQueue whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ExportQueue whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
